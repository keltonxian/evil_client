/* DO NOT EDIT THIS FILE - it is machine generated */
#ifndef GAMEPROXY_H
#define GAMEPROXY_H
#include <string.h>
#include <string>


using namespace std;
/* Header for class com_channel_channeldemo_MainActivity */

extern "C" {


class PayCallBack {
public:
	virtual void onPaySuccess(char *sucessInfo) = 0;
	virtual void onPayFail(char *failInfo) =0;
};

class ExitCallBack {
public:
	virtual void onGameExit() = 0;
	virtual void onNo3rd() = 0;
};

class XMUser {
	const char *userId;
	const char *userName;
	const char *token;
	const char *channelId;
	const char *productCode;
    const char *channelUserId;
    const char *channelLabel;
public:
	void setUserId(const char *uid) {
		userId = uid;
	}
	void setUserName(const char *uname) {
		userName = uname;
	}
	void setToken(const char *tok) {
		token = tok;
	}
	void setChannelId(const char *chid) {
		channelId = chid;
	}
	void setProductId(const char *pid) {
		productCode = pid;
	}
    void setChannelUserId(const char * cuid) {
        channelUserId = cuid;
    }
     void setChannelLabel(const char * clabel) {
        channelLabel = clabel;
    }


    const char *getUserId() {
      char *result = new char[strlen(userId) + 1];
      strcpy(result, userId);
      return result;
    }
    const char *getChannelUserId() {
     char *result = new char[strlen(channelUserId) + 1];
     strcpy(result, channelUserId);
     return result;
    }
    const char *getChannelLabel() {
     char *result = new char[strlen(channelLabel) + 1];
     strcpy(result, channelLabel);
     return result;
    }
	const char *getUserName() {
		char *result = new char[strlen(userName) + 1];
		strcpy(result, userName);
		return result;
	}
	const char *getChannelId() {
		char *result = new char[strlen(channelId) + 1];
        strcpy(result, channelId);
		return result;
	}
	const char *getProductCode() {
		char *result = new char[strlen(productCode) + 1];
		strcpy(result, productCode);
		return result;
	}
	const char *getToken() {
		char *result = new char[strlen(token) + 1];
		strcpy(result, token);
		return result;
	}

};
class XMUserListener {
public:
    // 当登陆成功时，系统会调用该注册的Listener实例的该方法
    // user  中包含了登陆用户的相关信息, 如用户ID，渠道代码，登陆令牌（token）等
    // customParams  该字符串是游戏发起登陆调用login时传入的，对登陆本身没有任何作用，只是为游戏配对发起登陆和登陆成功两个动作的
	virtual void onLoginSuccess(XMUser user, const char *customParams) = 0;


    // 当发起登陆失败时，系统会调用该函数，通知游戏登陆失败
    // reason  登陆失败原因
    // customParams 同onLoginSuccess中定义
	virtual void onLoginFailed(const char *reason, const char *customParams) = 0;


    // 当游戏中用户点击登出 游戏调用logout发起登出后，登出完成后系统会调用该函数
    // 当用户点击渠道悬浮窗中的登出按钮后，完成登出后系统会调用该函数
    // 开发者应该在该函数中实现用户在游戏中的登出逻辑
    // customParams 同onLoginSuccess中定义
	virtual void onLogout(const char *customParams) = 0;
};

class GameProxy {
public:
    // 设置用户事件监听器，用户的登入，登出等消息会通过该监听器传入
    // listener  用户事件监听器相关内容详见 XMUserListener
	static void SetUserListener(XMUserListener *listener);


    // 发起用户登陆，系统会调起相应渠道SDK的登陆界面进行登陆，登陆结果发送至用户事件监听器
    // customParams  该字符串与渠道SDK登陆本身毫无关系，由开发者自行定义，该字符串会在登陆结果通知中完整传回用户事件监听器
	static void Login(const char *customParams);


    // 发起用户登出，并不是退出，只是退出本次登陆，系统会调用渠道SDK进行渠道用户登出，登出结果会发送给用户事件监听器
    // customParams  同Login中定义
	static void Logout(const char *customParams);

    // 发起用户充值，即用户不定额购买游戏道具或者货币，系统会调用对应渠道SDK充值界面，用户选择金额后进行充值，系统会将充值的数额和结果发送至游戏服务器
    // itemName  游戏道具名称
    // unitPrice  游戏道具单位价格，单位为人民币分
    // defaultNum  用户选择购买道具界面的默认道具数量
    // callbackInfo  由游戏开发者定义传入的字符串，回与支付结果一同发送给游戏服务器，游戏服务器可通过该字段判断交易的详细内容（金额 角色等）
    // callbackUrl  该比支付结果通知给游戏服务器时的通知地址url，交易结束后，系统会向该url发送http请求，通知交易的结果金额callbackInfo等信息
    // payCallback  当客户端完成交易后回调用该对象的对应方法通知游戏客户端交易结果
	static void Charge(const char *itemName, int unitPrice, int defaultNum,
			const char *callBackInfo, const char * callbackUrl, PayCallBack *payCallBack);


    // 定额支付，游戏可调用该函数进行指定金额的购买
    // amount   该交易金额
    // count  虚拟物品数量
	static void Pay(int amount, const char *unitName, int count,
			const char *callBackInfo, const char * callbackUrl, PayCallBack *payCallBack);


    // 退出接口，当用户在游戏中需要退出游戏时调用该接口
    // 当渠道SDK提供了退出界面时，系统会调起渠道SDK退出界面，当用户在渠道SDK提供的退出界面中确定要退出游戏时，系统会调用 exitcallback->onGameExit()
    // 当渠道SDK没有提供退出界面时，系统会直接调用 exitcallback->onNo3rd()
	static void Exit(ExitCallBack *exitcallback);


	static void SetXMRoleData(

	                      const char* roleId,
	                      const char* roleName,
	                      const char*  roleLevel,
	                      const char*  zoneId,
	                      const char* zoneName

	                      );

    static void SetExtRoleData(const char* json);

	static const char* GetAndroidManifestMeta(const char* name);

	static const char* GetChannelLabel();

	static void releaseResource();

};

}
#endif
